<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>O365 on David Just</title>
    
    
    
    <link>/tags/o365/</link>
    <description>Recent content in O365 on David Just</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 20 Apr 2022 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/o365/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Working with the Microsoft Graph PowerShell SDK</title>
      <link>/post/working-with-powershell-microsoft-graph-sdk/</link>
      <pubDate>Wed, 20 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>/post/working-with-powershell-microsoft-graph-sdk/</guid>
      <description>
        
          &lt;img src=&#34;/post/working-with-powershell-microsoft-graph-sdk/graph.png&#34;/&gt;
          
        
        
        
          What is an API anyway? API stands for &amp;ldquo;Application Interface&amp;rdquo;. In simplest terms, APIs are services that bridge and allow two systems to interact. When we are talking about web services, such as those in M365, API usually refer to a REST API. I like this explanation from AWS:
 API architecture is usually explained in terms of client and server. The application sending the request is called the client, and the application sending the response is called the server.
          
        
        </description>
    </item>
    
    <item>
      <title>Helpful macOS Resources</title>
      <link>/macosresources/</link>
      <pubDate>Tue, 19 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>/macosresources/</guid>
      <description>
        
          
          
          
        
        
        
            Office Apps : https://macadmins.software/
  Useful tools : https://www.macadmin.info/#managementtools
  Profile Creator : https://github.com/ProfileCreator/ProfileCreator
  Best Practices : https://techcommunity.microsoft.com/t5/intune-customer-success/best-practice-examples-for-configuring-macos-apps-with-microsoft/ba-p/2564255
  Deploying Office : https://docs.microsoft.com/en-us/deployoffice/mac/preferences-outlook#disable-skype-for-business-online-meetings
  OneDrive config : https://docs.microsoft.com/en-us/onedrive/deploy-and-configure-on-macos#filesondemandenabled
  Custom onboarding splash screen : https://techcommunity.microsoft.com/t5/intune-customer-success/build-a-macos-onboarding-splash-screen-with-microsoft-endpoint/ba-p/2770980
  
          
        
        </description>
    </item>
    
    <item>
      <title>Intune for macOS Part 2 - Setup BYOD enrollment and Configure macOS Profiles</title>
      <link>/post/intune-for-macos-configure-profiles/</link>
      <pubDate>Tue, 19 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>/post/intune-for-macos-configure-profiles/</guid>
      <description>
        
          &lt;img src=&#34;/post/intune-for-macos-configure-profiles/mac.jpeg&#34;/&gt;
          
        
        
        
          Setup BYOD Enrollment In part 1, we explored how to setup a macOS virtual machine for testing. Now lets look at actually configuring Intune. The first thing we need to do is get an Apple MDM push certificate.
 Navigate to endpoint.microsoft.com &amp;lt; Devices &amp;lt; Enroll Devices &amp;lt; Apple Enrollment. Download the CSR. Follow the link “Create your MDM Push Certificate” Sign into your Apple ID (or create one if you do not have one) Click create certificate.
          
        
        </description>
    </item>
    
    <item>
      <title>Intune Deploy Software with WinGet</title>
      <link>/post/intune-install-software-with-winget/</link>
      <pubDate>Tue, 08 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>/post/intune-install-software-with-winget/</guid>
      <description>
        
          &lt;img src=&#34;/post/intune-install-software-with-winget/winget.png&#34;/&gt;
          
        
        
        
          Ever since the WinGet package manager was announced, I wanted to find ways to leverage the package manager to simplify deploying software to endpoints. After doing some research and testing, I found that WinGet was unfortunately not designed to be run in SYSTEM context. It was designed to be run under a user account. There is an open issue on GitHub currently and many admins, myself included, would really like WinGet to be designed with enterprise use in mind.
          
        
        </description>
    </item>
    
    <item>
      <title>Configuring Intune for macOS part 1 - Setup a macOS VM</title>
      <link>/post/intune-for-macos-configure-macos-vm/</link>
      <pubDate>Sun, 02 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>/post/intune-for-macos-configure-macos-vm/</guid>
      <description>
        
          &lt;img src=&#34;/post/intune-for-macos-configure-macos-vm/macdark.png&#34;/&gt;
          
        
        
        
          Premise
One of my clients has an Apple only environment. The client was previously managed with Jamf. Jamf is a great MDM platform for Apple devices and works really well however there are some downsides. First, the cost of Jamf is quite high, also while Jamf does support M365 condtional access and SSO with M365, it requires a bit more configuration than Intune does. My client was already paying for Enterprise mobility and Security licensing through M365 with Defender ATP for Endpoint so why not take advantage of the included Intune licensing?
          
        
        </description>
    </item>
    
  </channel>
</rss>