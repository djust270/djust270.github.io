<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>WinGet on David Just</title>
    
    
    
    <link>/tags/winget/</link>
    <description>Recent content in WinGet on David Just</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 23 Aug 2024 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/winget/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Install Software With WinGet As System (UPDATE 2024)</title>
      <link>/post/intune-install-software-with-winget-updated-2024/</link>
      <pubDate>Fri, 23 Aug 2024 00:00:00 +0000</pubDate>
      
      <guid>/post/intune-install-software-with-winget-updated-2024/</guid>
      <description>
        
          &lt;img src=&#34;/post/intune-install-software-with-winget-updated-2024/winget_imagine.png&#34;/&gt;
          
        
        
        
          Background Back in 2022, after a lot of testing, I developed a way to install any machine wide installer in SYSTEM context using WinGet. For the most part this worked great, however I noticed that if I deployed an application targeted to a device group, the application would not reliable install during autopilot / OOBE. This is because the DesktopAppInstaller UWP appxpacakage needs to be installed under a user account before WinGet is available to use.
          
        
        </description>
    </item>
    
    <item>
      <title>The New Microsoft Store Experience in Intune</title>
      <link>/post/the-new-microsoft-store-experience-in-intune/</link>
      <pubDate>Thu, 15 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>/post/the-new-microsoft-store-experience-in-intune/</guid>
      <description>
        
          &lt;img src=&#34;/post/the-new-microsoft-store-experience-in-intune/store.png&#34;/&gt;
          
        
        
        
          Microsoft relecently released the new Microsoft Store integration for Intune. The new integration allows admins to easily search the store and deploy traditional APPX/UWP packages as well as a limited number of new Win32 app packages. WinGet (the Windows package manager)is the technology behind this new experience.
This new experience greatly simplifies application deployment through Intune and is intended to replace the Microsoft Store for Business which will be retired in the first half of next year.
          
        
        </description>
    </item>
    
    <item>
      <title>Keep Applications Updated with WinGet and Proactive Remediations</title>
      <link>/post/keep-applications-updated-with-winget-and-proactive-remediations/</link>
      <pubDate>Mon, 22 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>/post/keep-applications-updated-with-winget-and-proactive-remediations/</guid>
      <description>
        
          &lt;img src=&#34;/post/keep-applications-updated-with-winget-and-proactive-remediations/WingetTools.png&#34;/&gt;
          
        
        
        
          The Why In a previous article , I demonstrated how to deploy applications to Intune using WinGet . I recieved a request to demonstrate how to use WinGet to update applications, and more importantly, how to run this on a schedule to keep applications updated. Since then, I found a really handy PowerShell wrapper module for WinGet called WinGetTools by Jeffrey Hicks. I made a small contribution to this module to allow it to work running under SYSTEM context.
          
        
        </description>
    </item>
    
    <item>
      <title>Intune Deploy Software with WinGet</title>
      <link>/post/intune-install-software-with-winget/</link>
      <pubDate>Tue, 08 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>/post/intune-install-software-with-winget/</guid>
      <description>
        
          &lt;img src=&#34;/post/intune-install-software-with-winget/winget.png&#34;/&gt;
          
        
        
        
          Ever since the WinGet package manager was announced, I wanted to find ways to leverage the package manager to simplify deploying software to endpoints. After doing some research and testing, I found that WinGet was unfortunately not designed to be run in SYSTEM context. It was designed to be run under a user account. There is an open issue on GitHub currently and many admins, myself included, would really like WinGet to be designed with enterprise use in mind.
          
        
        </description>
    </item>
    
  </channel>
</rss>